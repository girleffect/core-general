version: "3"

# Refer to the .env file for IP and port-related definitions

services:

  core-user-data-store:
    build:
      context: ../../core-user-data-store/
    environment:
      - DB_URI=postgresql+psycopg2://user_data_store:password@db:5432/user_data_store
      - ALLOWED_API_KEYS=demo-authentication-service-api-key,demo-authentication-service-celery-api-key,demo-management-layer-api-key
      # - SENTRY_DSN=<sentry_dsn_goes_here>
    volumes:
      - "../../core-user-data-store/:/app/"
    ulimits:
       nproc: 65535
       nofile:
         soft: 20000
         hard: 40000
    restart: on-failure
    command: scripts/waitFor.sh scripts/startApp.sh
    depends_on:
      - db
    networks:
      - oidcnetwork

  core-access-control:
    build:
      context: ../../core-access-control/
    environment:
      - DB_URI=postgresql+psycopg2://access_control:password@db:5432/access_control
      - ALLOWED_API_KEYS=demo-authentication-service-api-key,demo-authentication-service-celery-api-key,demo-management-layer-api-key
      # - SENTRY_DSN=<sentry_dsn_goes_here>
    volumes:
      - "../../core-access-control/:/app/"
    restart: on-failure
    command: scripts/waitFor.sh scripts/startApp.sh
    depends_on:
      - db
    networks:
      - oidcnetwork

  core-authentication-service:
    image: ge-auth:0.1
    build:
      context: ../../core-authentication-service/
    volumes:
      - "../../core-authentication-service/:/app/"
    command: scripts/startDjango.sh
    environment:
      - REDIS_URI=redis://redis:6379/3
      # NOTE: we bootstrap our database container with some dbs.
      - DB_DEFAULT=ENGINE=django.db.backends.postgresql,NAME=authentication_service,USER=authentication_service,PASSWORD=password,HOST=db,PORT=5432
      - STATIC_ROOT=/app/static
      - MEDIA_ROOT=/app/media
      - ALLOWED_HOSTS=*
      - LOG_LEVEL=DEBUG
      - CELERY_BROKER_URL=redis://redis:6379/2
      - USER_DATA_STORE_API_KEY=demo-authentication-service-api-key
      - ACCESS_CONTROL_API_KEY=demo-authentication-service-api-key
      - ALLOWED_API_KEYS=demo-management-layer-api-key
      - ACCESS_CONTROL_API=http://core-access-control:8080/api/v1
      - USER_DATA_STORE_API=http://core-user-data-store:8080/api/v1
      - EMAIL_HOST=smtp
      # Migrations can no longer be run without a specific env var being set specifically for it.
      - SKIP_MIGRATIONS=1
      - KINESIS_SESSION=aws_access_key_id=foobar,aws_secret_access_key=foobar,region_name=us-east-1
      - KINESIS_PRODUCER=stream_name=test-stream
      - KINESIS_BOTO3_CLIENT_SETTINGS=endpoint_url=http://localstack:4568
      # The varaibles below are not used in production, just the docker-compose env
      - WAGTAIL_1_CALLBACK=http://wagtail-demo-1-site-1:8000/oidc/callback/
      - WAGTAIL_2_CALLBACK=http://wagtail-demo-2-site-1:8000/oidc/callback/
      - WAGTAIL_3_CALLBACK=http://wagtail-demo-1-site-2:8000/oidc/callback/
      - WAGTAIL_1_LOGOUT_REDIRECT=http://wagtail-demo-1-site-1:8000/
      - WAGTAIL_2_LOGOUT_REDIRECT=http://wagtail-demo-2-site-1:8000/
      - WAGTAIL_3_LOGOUT_REDIRECT=http://wagtail-demo-1-site-2:8000/
    depends_on:
      - db
      - smtp
      - core-access-control
      - core-user-data-store
    networks:
      - oidcnetwork

  core-authentication-celery:
    image: ge-auth:0.1
    build:
      context: ../../core-authentication-service/
    volumes:
      - "../../core-authentication-service/:/app/"
    command: celery worker # scripts/waitFor.sh celery -A project worker -l info
    environment:
      - ALLOWED_API_KEYS=demo-management-layer-api-key
      - DB_DEFAULT=ENGINE=django.db.backends.postgresql,NAME=authentication_service,USER=authentication_service,PASSWORD=password,HOST=db,PORT=5432
      - REDIS_URI=redis://redis:6379/3
      - CELERY_APP=project
      - CELERY_BROKER_URL=redis://redis:6379/2
      - EMAIL_HOST=smtp
      - SKIP_MIGRATIONS=1
      - USER_DATA_STORE_API_KEY=demo-authentication-service-celery-api-key
      - ACCESS_CONTROL_API_KEY=demo-authentication-service-celery-api-key
      - ACCESS_CONTROL_API=http://core-access-control:8080/api/v1
      - USER_DATA_STORE_API=http://core-user-data-store:8080/api/v1
      - KINESIS_SESSION=aws_access_key_id=foobar,aws_secret_access_key=foobar,region_name=us-east-1
      - KINESIS_PRODUCER=stream_name=test-stream
      - KINESIS_BOTO3_CLIENT_SETTINGS=endpoint_url=http://localstack:4568
      # - EMAIL_USER=
      # - EMAIL_PASSWORD=
      # - EMAIL_USE_TLS=
      # - EMAIL_USE_SSL=
      # - EMAIL_TIMEOUT=
    depends_on:
      - db
      - smtp
    networks:
      - oidcnetwork

  core-management-layer:
    build:
      context: ../../core-management-layer/
    environment:
      - MAPPING_REFRESH_SLEEP_SECONDS=60
      - CACHE_TIME=60
      - STUBS_CLASS=management_layer.integration.Implementation
      # - PYTHONASYNCIODEBUG=1
      - ACCESS_CONTROL_API=http://core-access-control:8080/api/v1
      - AUTHENTICATION_SERVICE_API=http://core-authentication-service:8000/api/v1
      - USER_DATA_STORE_API=http://core-user-data-store:8080/api/v1
      - AUTHENTICATION_SERVICE_JWKS=http://core-authentication-service:8000/openid/jwks
      - WITH_UI=true
      - UI_HOST=core-management-layer
      - JWT_SECRET=management_layer_workaround
      - JWT_AUDIENCE=management_portal
      - JWT_ISSUER=http://core-authentication-service:8000/openid
      - ACCESS_CONTROL_API_KEY=demo-management-layer-api-key
      - AUTHENTICATION_SERVICE_API_KEY=demo-management-layer-api-key
      - USER_DATA_STORE_API_KEY=demo-management-layer-api-key
      - REDIS=redis://redis:6379/1
      # - SENTRY_DSN=<sentry_dsn_goes_here>
      - MANAGEMENT_PORTAL_CLIENT_ID=management_portal
    volumes:
      - "../../core-management-layer/:/app/"
    ulimits:
       nproc: 65535
       nofile:
         soft: 20000
         hard: 40000
    depends_on:
      - redis
      - core-access-control
      - core-user-data-store
      - core-authentication-service
    restart: on-failure
    # For mocking:
    # command: ./prism run --validate --debug --list --mockDynamic -s ./swagger/management_layer.yml -p 8080
    command: httpd.py --logging=debug
    networks:
      - oidcnetwork

  core-management-portal:
    image: ge-gmp:0.1
    build:
      context: ../../core-management-portal/
      args:
        - REACT_APP_AUTHORIZATION_ENDPOINT=http://core-authentication-service:8000/openid/authorize/
        - REACT_APP_AUTHORIZATION_USER_ENDPOINT=http://core-authentication-service:8000/openid/userinfo/
        - REACT_APP_CLIENT_ID=management_portal
        - REACT_APP_LOGOUT_URL=http://core-authentication-service:8000/openid/end-session/
        - REACT_APP_MANAGEMENT_LAYER=http://core-management-layer:8000
        - REACT_APP_PORTAL_URL=http://core-management-portal/
        - REACT_APP_PORTAL_LOGIN_CALLBACK=#/oidc/callback?
    depends_on:
      - core-authentication-service
      - core-management-layer
    networks:
      - oidcnetwork

  db:
    build:
      context: ../apps/database/
    # To rather mount localhost postgres data.
    #volumes:
    #    - "/var/lib/postgresql/data:/var/lib/postgresql/data"
    networks:
      - oidcnetwork

  redis:
    image: "redis:alpine"
    expose:
      - "6379"
    networks:
      - oidcnetwork

  squid:
    image: "datadog/squid"
    expose:
      - "3128"
    ports:
        - "127.0.0.1:${SQUID_PORT}:3128"
    networks:
      - oidcnetwork

  smtp:
    build:
      context: ../apps/smtp/
    expose:
      - "25"
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - oidcnetwork

  pacserver:
    build:
      context: ../apps/proxy/
    ports:
      - "${PACSERVER_PORT}:8000"
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - oidcnetwork

  prometheus:
    image: "prom/prometheus:latest"
    container_name: prometheus
    build:
      context: ../apps/prometheus/
    expose:
      - 9090
    ports:
      - "9090:9090"
    volumes:
      - "../apps/prometheus/:/etc/prometheus/"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention=200h"
      - "--web.enable-lifecycle"
    networks:
      - oidcnetwork

  # The name "core-robot" was chosen so that this container is accessible via
  # the squid proxy, which are configured to service URLs starting with "core-".
  #core-robot:
  #  build:
  #    context: .
  #  ports:
  #    - "${ROBOT_PORT}:8000"
  #  environment:
  #    - ENVIRONMENT=docker
  #    - AUTHENTICATION_SERVICE_API_KEY=demo-management-layer-api-key
  #  volumes:
  #    - ./robot:/app/
  #  restart: on-failure
  #  command: test_runner.sh
  #  depends_on:
  #    - db
  #    - redis
  #    - smtp
  #    - core-access-control
  #    - core-authentication-service
  #    - core-user-data-store
  #    - core-management-layer
  #    - core-management-portal
  #    - wagtail-demo-1
  #    - wagtail-demo-2
  #  networks:
  #    - oidcnetwork

# This network definition limits the IP range that can be used.
# This is convenient because we need to refer to the IP range in the
# proxy.pac file.
networks:
  oidcnetwork:
    external: true
