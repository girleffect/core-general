version: '3'

services:
#  core-general:
#    image: girleffect:1.0
#    build:
#     context: .

  core-authentication-service:
    image: ge-auth:0.1
    build:
      context: ../core-authentication-service/
    volumes:
      - ../core-authentication-service:/code
    command: scripts/waitFor.sh scripts/startDjango.sh
    ports:
      - "8000:8000"
    environment:
      - DB_HOST=172.18.0.2
      - REDIS_URI=redis://172.18.0.6:6379/0
      # NOTE: we bootstrap our database container with some dbs.
      - DB_NAME=authentication_service
      - ALLOWED_HOSTS=*
      - WAGTAIL_1_IP=http://172.18.0.4:8000/oidc/callback/
    depends_on:
      - db
    networks:
      oidcnetwork:
        ipv4_address: 172.18.0.3

  wagtail-demo-1:
    image: wtd_1:0.1
    build:
      context: apps/wagtail_client/
    command: scripts/waitFor.sh scripts/startDjango.sh
    ports:
      - "8001:8001"
    environment:
      # Not current on postgres.
      - DB_HOST=db
      - DB_NAME=wagtail_1
      - WAGTAIL_SITE_NAME=wagtail_1_demo
      - OIDC_RP_CLIENT_ID=client_id_1
      - OIDC_RP_CLIENT_SECRET=super_client_secret_1
      - OIDC_OP_AUTHORIZATION_ENDPOINT=http://172.18.0.3:8000/openid/authorize/
      - OIDC_OP_TOKEN_ENDPOINT=http://172.18.0.3:8000/openid/token/
      - OIDC_OP_USER_ENDPOINT=http://172.18.0.3:8000/openid/userinfo/
    depends_on:
      - db
      - core-authentication-service
    volumes:
        - "./apps/wagtail_client/:/app/"
    networks:
      oidcnetwork:
        ipv4_address: 172.18.0.4

#  wagtail-demo-2:
#    image: wtd_2:0.1
#    build:
#      context: apps/wagtail_client/
#    command: scripts/waitFor.sh scripts/startDjango.sh
#    ports:
#      - "8002:8002"
#    environment:
#      # Not current on postgres.
#      - DB_HOST=db
#      - DB_NAME=wagtail_2
#      - WAGTAIL_SITE_NAME=wagtail_2_demo
#      - OIDC_RP_CLIENT_ID=client_id_2
#      - OIDC_RP_CLIENT_SECRET=super_client_secret_2
#      - OIDC_OP_AUTHORIZATION_ENDPOINT=http://172.18.0.3:8000/openid/authorize/
#      - OIDC_OP_TOKEN_ENDPOINT=http://172.18.0.3:8000/openid/token/
#      - OIDC_OP_USER_ENDPOINT=http://172.18.0.3:8000/openid/userinfo/
#    depends_on:
#      - db
#      - core-authentication-service
#    networks:
#      oidcnetwork:
#        ipv4_address: 172.18.0.5

  db:
    build:
      context: apps/database/
    # To rather mount localhost postgres data.
    #volumes:
    #    - "/var/lib/postgresql/data:/var/lib/postgresql/data"
    networks:
      oidcnetwork:
        ipv4_address: 172.18.0.2

#  # Moved down for now, to keep ticket related docker data together.
#  core-user-data-store:
#    build:
#      context: ../core-user-data-store/
#      args:  # Maps to args defined in the Dockerfile
#        - password=secret
#        - dbkey  # Get value from the compose environment
#    volumes:
#      - ../core-user-data-store:/code
#    expose:
#        - "5000"
##    healthcheck:
##      test: ["CMD", "curl", "-f", "http://localhost:5000"]
##      interval: 1m30s
##      timeout: 10s
##      retries: 3
#    extra_hosts:
#      - "somehost:8.8.8.8"
#    ulimits:
#       nproc: 65535
#       nofile:
#         soft: 20000
#         hard: 40000
#    restart: on-failure
#    command: /code/prism run --validate --debug --list --mockDynamic -s /code/swagger/user_data_store.yml -p 5000
#
#  core-access-control:
#    build:
#      context: ../core-access-control/
#    volumes:
#      - ../core-access-control:/code
#    expose:
#      - "5000"
#    restart: on-failure
#    command: /code/prism run --validate --debug --list --mockDynamic -s /code/swagger/access_control.yml -p 5000
#    depends_on:
#      - core-general
#
#  core-management-layer:
#    build:
#      context: ../core-management-layer/
#    volumes:
#      - ../core-management-layer:/code
#    ports:
#      - "8001:8080"
#    depends_on:
#      - core-access-control
#      - core-user-data-store
#      # - core-authentication-service
#    restart: on-failure
#    # For mocking:
#    # command: /code/prism run --validate --debug --list --mockDynamic -s /code/swagger/management_layer.yml -p 8080
#
##  core-management-portal:
##    build:
##      context: ../core-management-portal/
##    volumes:
##      - ../core-management-portal/management_portal:/code
##    depends_on:
##      - core-management-layer
##    restart: on-failure
##    command: bash -c "while true; do sleep 10; date; done"

  redis:
    image: "redis:alpine"
    expose:
      - "6379"
    networks:
      oidcnetwork:
        ipv4_address: 172.18.0.6

networks:
  oidcnetwork:
    external: true

